AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda custom resource to populate an existing RDS secret with host, dbname, and port fields.

Parameters:
  DjangoDBSecretArn:
    Type: String
    Description: ARN of the existing Secrets Manager secret (e.g., arn:aws:secretsmanager:region:acct:secret:xxxx)
  RdsEndpoint:
    Type: String
    Description: RDS endpoint (e.g., mydbcluster.abc123xyz.eu-central-1.rds.amazonaws.com)
  DbName:
    Type: String
    Description: Database name (e.g., productivitydb)

Resources:

  SecretPopulatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SecretPopulatorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:PutSecretValue
                Resource: !Ref DjangoDBSecretArn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  SecretPopulatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: PopulateDjangoSecret
      Handler: index.handler
      Role: !GetAtt SecretPopulatorRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import urllib.request
          import hashlib

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event['ResponseURL']
              responseBody = {
                  'Status': responseStatus,
                  'Reason': 'See CloudWatch Logs: ' + context.log_stream_name,
                  'PhysicalResourceId': physicalResourceId or context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'NoEcho': noEcho,
                  'Data': responseData
              }
              json_responseBody = json.dumps(responseBody)
              headers = {
                  'content-type': '',
                  'content-length': str(len(json_responseBody))
              }
              req = urllib.request.Request(responseUrl, data=json_responseBody.encode('utf-8'), headers=headers, method='PUT')
              try:
                  with urllib.request.urlopen(req) as response:
                      print("Status code:", response.getcode())
                      print("Status message:", response.read().decode('utf-8'))
              except Exception as e:
                  print("send(..) failed:", str(e))

          def handler(event, context):
              print("Received event:", json.dumps(event))
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      secret_arn = event['ResourceProperties']['SecretArn']
                      db_endpoint = event['ResourceProperties']['DBEndpoint']
                      db_name = event['ResourceProperties']['DBName']
                      port = 5432

                      client = boto3.client('secretsmanager')
                      secret_val = client.get_secret_value(SecretId=secret_arn)
                      secret_dict = json.loads(secret_val['SecretString'])

                      secret_dict['host'] = db_endpoint
                      secret_dict['dbname'] = db_name
                      secret_dict['port'] = port

                      client.put_secret_value(
                          SecretId=secret_arn,
                          SecretString=json.dumps(secret_dict)
                      )

                  # Generate consistent but unique ID from the secret + endpoint
                  hash_id = hashlib.sha256((secret_arn + db_endpoint + db_name).encode()).hexdigest()[:10]
                  send(event, context, SUCCESS, {}, physicalResourceId=f"Populator-{hash_id}")

              except Exception as e:
                  print("Exception:", str(e))
                  send(event, context, FAILED, {'Error': str(e)})

  PopulateSecretCustomResource:
    Type: Custom::PopulateSecret
    DependsOn: SecretPopulatorFunction
    Properties:
      ServiceToken: !GetAtt SecretPopulatorFunction.Arn
      SecretArn: !Ref DjangoDBSecretArn
      DBEndpoint: !Ref RdsEndpoint
      DBName: !Ref DbName

Outputs:
  PopulatorLambdaName:
    Description: Name of the Lambda function
    Value: !Ref SecretPopulatorFunction
