AWSTemplateFormatVersion: '2010-09-09'
Description: VPC, subnets, NAT, route tables, and VPC endpoints for Django app stack v2 (NAT Instance + S3 Gateway Endpoint)

Parameters:
  VpcCidr:
    Type: String
    Default: 10.10.0.0/16
    Description: The CIDR block for the VPC

  PublicSubnet1Cidr:
    Type: String
    Default: 10.10.1.0/24
    Description: Public subnet 1 CIDR

  PublicSubnet2Cidr:
    Type: String
    Default: 10.10.2.0/24
    Description: Public subnet 2 CIDR

  PrivateSubnet1Cidr:
    Type: String
    Default: 10.10.101.0/24
    Description: Private subnet 1 CIDR

  PrivateSubnet2Cidr:
    Type: String
    Default: 10.10.102.0/24
    Description: Private subnet 2 CIDR

  NATInstanceAmiId:
    Type: String
    Description: AMI ID for NAT instance (e.g., Amazon Linux 2 with SSM agent)

  NATInstanceType:
    Type: String
    Default: t3.micro
    Description: Instance type for NAT instance

  NatKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair name for NAT instance SSH

  AdminIngressCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR allowed to SSH to the NAT instance (e.g., 203.0.113.25/32)

Resources:

  MyVPCv2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: DjangoVPCv2

  MyInternetGatewayv2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: DjangoIGWv2

  AttachGatewayv2:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPCv2
      InternetGatewayId: !Ref MyInternetGatewayv2

  PublicSubnet1v2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCv2
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DjangoPublicSubnet1v2

  PublicSubnet2v2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCv2
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DjangoPublicSubnet2v2

  PrivateSubnet1v2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCv2
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DjangoPrivateSubnet1v2

  PrivateSubnet2v2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCv2
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: DjangoPrivateSubnet2v2

  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NAT instance security group
      VpcId: !Ref MyVPCv2
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnet1Cidr
        - IpProtocol: -1
          CidrIp: !Ref PrivateSubnet2Cidr
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AdminIngressCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: DjangoNATSecurityGroup

  NATInstanceCWAgentConfig:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /nat-instance/cloudwatch-agent-config
      Type: String
      Value: |
        {
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/messages",
                    "log_group_name": "/aws/ec2/nat-instance/messages",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "metrics_collected": {
              "mem": {
                "measurement": [
                  { "name": "mem_used_percent", "unit": "percent" }
                ]
              }
            }
          }
        }

  NatInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      # (Optionally remove RoleName to let CFN autogenerate for easier updates)
      RoleName: !Sub DjangoNATInstanceRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: DjangoNATInstanceRole

  NatInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      # (Optionally remove InstanceProfileName to autogenerate)
      InstanceProfileName: !Sub DjangoNATInstanceProfile-${AWS::StackName}
      Roles:
        - !Ref NatInstanceRole

  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref NatKeyName
      InstanceType: !Ref NATInstanceType
      ImageId: !Ref NATInstanceAmiId
      SubnetId: !Ref PublicSubnet1v2
      SecurityGroupIds:
        - !Ref NATSecurityGroup
      IamInstanceProfile: !Ref NatInstanceProfile
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: DjangoNATInstance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -euo pipefail

          # Detect public egress interface (eth0 on Nitro, but detect just in case)
          PUB_IF="$(ip route get 1.1.1.1 | awk '{for(i=1;i<=NF;i++) if($i=="dev"){print $(i+1); exit}}')"
          [ -n "$PUB_IF" ] || PUB_IF=eth0

          # Enable IPv4 forwarding now + persistently
          sysctl -w net.ipv4.ip_forward=1
          sed -i '/^net\.ipv4\.ip_forward/d' /etc/sysctl.conf
          echo 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf

          # Flush then add NAT + forward rules with detected interface
          iptables -F || true
          iptables -t nat -F || true
          iptables -t nat -A POSTROUTING -o "$PUB_IF" -j MASQUERADE
          iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
          iptables -A FORWARD -s ${VpcCidr} -o "$PUB_IF" -j ACCEPT

          # Persist rules (Amazon Linux 2)
          yum install -y -q iptables-services || true
          service iptables save || iptables-save > /etc/sysconfig/iptables
          systemctl enable iptables || true
          systemctl restart iptables || true

          # Ensure SSM Agent is enabled/running
          systemctl enable amazon-ssm-agent || true
          systemctl restart amazon-ssm-agent || true

          # Install and start CloudWatch Agent (optional)
          yum install -y -q amazon-cloudwatch-agent || true
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config -m ec2 \
            -c ssm:/nat-instance/cloudwatch-agent-config -s || true

  # Allocate EIP and associate separately (safer pattern)
  NATInstanceEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Tags:
      - Key: Name
        Value: DjangoNATInstanceEIP

  NATInstanceEipAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt NATInstanceEip.AllocationId
      InstanceId: !Ref NATInstance

  PublicRouteTablev2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPCv2
      Tags:
        - Key: Name
          Value: DjangoPublicRouteTablev2

  PublicRoutev2:
    Type: AWS::EC2::Route
    DependsOn: AttachGatewayv2
    Properties:
      RouteTableId: !Ref PublicRouteTablev2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGatewayv2

  PublicSubnet1RouteTableAssociationv2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1v2
      RouteTableId: !Ref PublicRouteTablev2

  PublicSubnet2RouteTableAssociationv2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2v2
      RouteTableId: !Ref PublicRouteTablev2

  PrivateRouteTable1v2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPCv2
      Tags:
        - Key: Name
          Value: DjangoPrivateRouteTable1v2

  PrivateRouteTable2v2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPCv2
      Tags:
        - Key: Name
          Value: DjangoPrivateRouteTable2v2

  PrivateSubnet1RouteTableAssociationv2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1v2
      RouteTableId: !Ref PrivateRouteTable1v2

  PrivateSubnet2RouteTableAssociationv2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2v2
      RouteTableId: !Ref PrivateRouteTable2v2

  PrivateRoute1v2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1v2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance

  PrivateRoute2v2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2v2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance

  # ----------------------------
  # VPC ENDPOINTS
  # ----------------------------

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for interface endpoints (allow 443 from whole VPC)
      VpcId: !Ref MyVPCv2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EndpointSecurityGroup

  # S3 Gateway Endpoint (no SG; attaches to private route tables)
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Gateway
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PrivateRouteTable1v2
        - !Ref PrivateRouteTable2v2
      # Optional: add PolicyDocument to restrict to specific buckets

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

  LogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

  EventsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.events
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

  ECRDockerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

  STSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sts
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

  KMSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPCv2
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kms
      SubnetIds:
        - !Ref PrivateSubnet1v2
        - !Ref PrivateSubnet2v2
      SecurityGroupIds:
        - !Ref EndpointSecurityGroup
      PrivateDnsEnabled: true

Outputs:
  MyVPCv2:
    Description: VPC ID
    Value: !Ref MyVPCv2
    Export:
      Name: MyVPCv2

  PublicSubnet1v2:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1v2
    Export:
      Name: MyPublicSubnet1v2

  PublicSubnet2v2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2v2
    Export:
      Name: MyPublicSubnet2v2

  PrivateSubnet1v2:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1v2
    Export:
      Name: MyPrivateSubnet1v2

  PrivateSubnet2v2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2v2
    Export:
      Name: MyPrivateSubnet2v2

  NATSecurityGroupOut:
    Description: NAT instance security group
    Value: !Ref NATSecurityGroup
    Export:
      Name: MyNATSecurityGroup

  NATInstanceOut:
    Description: NAT instance ID
    Value: !Ref NATInstance
    Export:
      Name: MyNATInstance

  NATInstanceEIPOut:
    Description: NAT instance Elastic IP
    Value: !Ref NATInstanceEip
    Export:
      Name: MyNATInstanceEIP

  EndpointSecurityGroupOut:
    Description: Interface Endpoints Security Group
    Value: !Ref EndpointSecurityGroup
    Export:
      Name: MyInterfaceEndpointSG

  S3EndpointId:
    Description: S3 Gateway VPC Endpoint ID
    Value: !Ref S3Endpoint
    Export:
      Name: MyS3GatewayEndpoint
